#!/usr/bin/gawk -f
#
# Usage: process_benchmarks.awk < ${board}.txt
#
# Takes the *.txt file generated by AutoBenchmark.ino and basically does
# a GROUP BY operation on (name, dataSize). Then prints the result in the
# same order as the original 'name'.

BEGIN {
  # Set to 1 when 'SIZEOF' is detected
  collect_sizeof = 0

  # Set to 1 when 'BENCHMARKS' is detected
  collect_benchmarks = 0
}

/^SIZEOF/ {
  collect_sizeof = 1
  collect_benchmarks = 0
  sizeof_index = 0
  next
}

/^BENCHMARKS/ {
  collect_sizeof = 0
  collect_benchmarks = 1
  benchmark_index = 0
  next
}

!/^END/ {
  if (collect_sizeof) {
    s[sizeof_index] = $0
    sizeof_index++
  }
  if (collect_benchmarks) {
    u[benchmark_index]["name"] = $1
    u[benchmark_index]["dataSize"] = $2
    u[benchmark_index]["min"] = $3
    u[benchmark_index]["avg"] = $4
    u[benchmark_index]["max"] = $5
    u[benchmark_index]["sampleSize"] = $6
    benchmark_index++
  }
}

END {
  TOTAL_BENCHMARKS = benchmark_index
  TOTAL_SIZEOF = sizeof_index

  # Perform a 'groupBy(name, dataSize)' transformation. Build an ordered list
  # unique names for future iterations.
  name_index = 0
  for (i = 0; i < TOTAL_BENCHMARKS; i++) {
    name = u[i]["name"]
    dataSize = u[i]["dataSize"]
    avg = u[i]["avg"]
    g[name][dataSize] = avg

    # Insert name into names[] array to keep track of ordering.
    if (! (name in names_map)) {
      names_map[name] = name_index
      names_array[name_index] = name
      name_index++
    }
  }
  TOTAL_NAMES = name_index

  printf("+---------------------+------------------------+---------+---------+---------+\n")
  printf("|            \\      N |    10 |    30 |    100 |     300 |    1000 |    3000 |\n")
  printf("| Function    \\       |       |       |        |         |         |         |\n")

  for (i = 0; i < TOTAL_NAMES; i++) {
    name = names_array[i]
    if (name == "quickSortMedianSwapped()") {
      displayName = "quickSortMdnSwppd()"
    } else {
      displayName = name
    }
    if (name ~ /^bubbleSort\(\)/ \
        || name ~ /^shellSortClassic\(\)/ \
        || name ~ /^combSort13\(\)/ \
        || name ~ /^quickSortMiddle\(\)/ \
        || name ~ /^qsort\(\)/ \
    ) {
      printf("|---------------------+-------+-------+--------+---------+---------+---------|\n")
    }

    # If entry is missing for a particular N, print nothing instead of "0.000".
    g1000 = g[name]["1000"]
    f1000 = (g1000 == "") ? "%7s" : "%7.3f"

    g3000 = g[name]["3000"]
    f3000 = (g3000 == "") ? "%7s" : "%7.3f"

    format = sprintf(\
        "| %%-19s | %%5.3f | %%5.3f | %%6.3f | %%7.3f | %s | %s |\n",
        f1000, f3000)
    printf(format,
      displayName,
      g[name]["10"],
      g[name]["30"],
      g[name]["100"],
      g[name]["300"],
      g[name]["1000"],
      g[name]["3000"])
  }
  printf("+---------------------+-------+-------+--------+---------+---------+---------+\n")
}
